Java,C#
Using GraalVM Context polyglot = ContextnewBuilder()allowAllAccess(true)build();  //Ruby Value rubyArray = polygloteval("ruby"  "[12424]"); int rubyResult = rubyArraygetArrayElement(2)asInt();  //Python Value pythonArray = contexteval("python"  "[12424]"); int pythonResult = pythonArraygetArrayElement(2)asInt();  //JavaScript Value jsArray = polygloteval("js"  "[12424]"); int jsResult = jsArraygetArrayElement(2)asInt();  //R Value rArray = polygloteval("R"  "c(12424)"); int rResult = rArraygetArrayElement(2)asInt();  //LLVM (in this case C  but could be C  Go  Basic  etc) Source source = SourcenewBuilder("llvm"  new File("C_Programbc"))build(); Value cpart = polygloteval(source); cpartgetMember("main")execute();  Traditional way // initialize the engine var invocable = new ScriptEngineManager()getEngineByName("jruby"); var rubyFile = new FileReader("Deepthoughtrb"); engineeval(fr);,// initialize the engine  var runtime = ScriptRuntimeCreateFromConfiguration(); dynamic globals = runtimeGlobals;  runtimeExecuteFile("Deepthoughtrb");  // create a new instance of "Deepthought" calculator var calc = globalsDeepthought@new();  // set calculator input values calca = 6; calcb = 7;  // calculate the result var answer = calcCalculate();  // create a new instance of "Deepthought" calculator var calcClass = engineeval("Deepthought"); var calc = invocableinvokeMethod(calcClass  "new");  // set calculator input values invocableinvokeMethod(calc  "a="  6); invocableinvokeMethod(calc  "b="  7);  // calculate the result var answer = invocableinvokeMethod(calc  "Calculate");
Notes for the Java implementation Ruby accessors names are generated from the attribute name with a <kbd>=</kbd> suffix When assigning values  Java developers must use the Ruby accessor method name Dynamic objects from a foreign language are not firstclass objects in that they must be manipulated through an API,Notes for the C# implementation Objects returned from properties or methods of <kbd>dynamic</kbd> objects are themselves of <kbd>dynamic</kbd> type When type inference (the <kbd>var</kbd> keyword) is used  the variables calc and answer are inferred dynamic/latebound Dynamic  latebounds objects are firstclass citizens that can be manipulated using C# syntax even though they have been created by an external language <kbd>new</kbd> is a reserved word The <kbd>@</kbd> prefix allows keywords to be used as identifiers
