C#,Visual Basic .NET
<source lang="csharp"> // Single line comment /* Multi-line comment   line 2   line 3 */  /// XML single line comment /** XML multi-line comment    line 2    line 3 */  if COMMENT   multi-line comment via pre-processing    line 2   line 3  endif </source>,<source lang="vbnet"> ' Single line comment ''' XML 1st line comment ''' XML 2nd line comment ''' XML 3rd line comment If COMMENT Then   multi-line comment via pre-processing    line 2   line 3  End If </source> Intra-line comments not available
C#,Visual Basic .NET
if (i<10) {     // condition is true  } else if (othercondition) {      // condition is false and othercondition is true } else {      // condition and othercondition are false  },<source lang=vbnet> If condition Then    ' condition is true  ElseIf othercondition Then    ' condition is false and othercondition is true  Else    ' condition and othercondition false  End If </source>
C#,Visual Basic .NET
<source lang=csharp> for (int i = 0; i < number; ++i) {    // loop from zero up to one less than number  } </source>,<source lang=vbnet> For i As Integer = 0 To number - 1    ' loop from zero up to one less than number  Next </source>
<source lang=csharp> for (int i = number; i >= 0; --i) {    // loops from number down to zero  } </source>,<source lang=vbnet> For i As Integer = number To 0 Step -1    ' loops from number down to zero  Next </source>
<source lang=csharp> for (int i = 0; i <= 20; i += 2) {    // loops from 0 to 20 by 2's  } </source>,<source lang=vbnet> For i As Integer = 0 To 20 Step 2    ' loops from 0 to 20 by 2's  Next </source>
<source lang=csharp> break; //breaks out of a loop </source>,<source lang=vbnet> Exit For 'breaks out of a for loop </source> <source lang=vbnet> Exit While 'breaks out of a while loop </source> <source lang=vbnet> Exit Do 'breaks out of a do loop </source>
C#,Visual Basic .NET
<source lang=csharp> if (a == b) {    // equal  } </source>,<source lang=vbnet> If a = b Then    ' equal  End If </source>
<source lang=csharp> if (a != b) {    // not equal  } </source> Or: <source lang=csharp> if (!(a == b)) {    // not equal  } </source>,<source lang=vbnet> If a <> b Then    ' not equal  End If </source> Or: <source lang=vbnet> If Not a = b Then    ' not equal  End If </source>
<source lang=csharp> if (a == b & c == d | e == f) {    // non-short-circuiting boolean operators  } </source>,<source lang=vbnet> If a = b And c = d Or e = f Then    ' non-short-circuiting boolean operators  End If </source>
<source lang=csharp> if (a == b && c == d || e == f) {    // short-circuiting boolean operators  } </source>,<source lang=vbnet> If a = b AndAlso c = d OrElse e = f Then    ' short-circuiting boolean operators  End If </source>
[empty],[added]
C#,Visual Basic .NET
<source lang=csharp> if (object.ReferenceEquals(a  b)) {    // variables refer to the same instance  } </source>,<source lang=vbnet> If a Is b Then 'Can also be written as If Object.ReferenceEquals(a  b) Then    ' variables refer to the same instance  End If </source>
<source lang=csharp> if (!object.ReferenceEquals(a  b)) {    // variables do not refer to the same instance  } </source>,<source lang=vbnet> If a IsNot b Then    ' variables do not refer to the same instance  End If </source>
<source lang=csharp> if (a == b) {    // instances are equivalent  } </source>,<source lang=vbnet> If a = b Then    ' instances are equivalent  End If </source>
<source lang=csharp> if (a != b) {    // not equivalent  } </source>,<source lang=vbnet> If a <> b Then    ' not equivalent  End If </source>
<source lang=csharp> var type = typeof(int); </source>,<source lang=vbnet> Dim type = GetType(Integer) </source>
<source lang=csharp> if (a is b) {    // types of a and b are compatible  } </source>,<source lang=vbnet> If TypeOf a Is b Then    ' types of a and b are compatible  End If </source>
<source lang=csharp> if (!(a is b)) {    // types of a and b are not compatible  } </source>,<source lang=vbnet> If TypeOf a IsNot b Then    ' types of a and b are not compatible  End If </source>
